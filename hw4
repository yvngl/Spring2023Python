{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4-е домашнее задание - Библиотека numpy\n",
    "\n",
    "Подпишите этот блокнот: укажите ФИО и номер группы. Выполненное задание загрузите в свой репозиторий «<b>Spring2023Python</b>» в github в папку \"<b>homework04</b>\".  \n",
    "\n",
    "Перед выполнением этого домашнего задания полезно прочитать про возможности и основные методы библиотеки numpy:  \n",
    "http://acm.mipt.ru/twiki/bin/view/Cintro/PythonNumpy  \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1.\tСоздайте равномерное разбиение интервала от -1.3 до 2.5 на 64 отрезка."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1.3     , -1.240625, -1.18125 , -1.121875, -1.0625  , -1.003125,\n",
       "       -0.94375 , -0.884375, -0.825   , -0.765625, -0.70625 , -0.646875,\n",
       "       -0.5875  , -0.528125, -0.46875 , -0.409375, -0.35    , -0.290625,\n",
       "       -0.23125 , -0.171875, -0.1125  , -0.053125,  0.00625 ,  0.065625,\n",
       "        0.125   ,  0.184375,  0.24375 ,  0.303125,  0.3625  ,  0.421875,\n",
       "        0.48125 ,  0.540625,  0.6     ,  0.659375,  0.71875 ,  0.778125,\n",
       "        0.8375  ,  0.896875,  0.95625 ,  1.015625,  1.075   ,  1.134375,\n",
       "        1.19375 ,  1.253125,  1.3125  ,  1.371875,  1.43125 ,  1.490625,\n",
       "        1.55    ,  1.609375,  1.66875 ,  1.728125,  1.7875  ,  1.846875,\n",
       "        1.90625 ,  1.965625,  2.025   ,  2.084375,  2.14375 ,  2.203125,\n",
       "        2.2625  ,  2.321875,  2.38125 ,  2.440625,  2.5     ])"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "np.linspace(-1.3, 2.5, 65)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2.\tСгенерируйте numpy массив длины $3n$, заполненный циклически числами 1, 2, 3, 1, 2, 3, 1...."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 2, 3, 1, 2, 3])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "n = 2\n",
    "\n",
    "np.array([1, 2, 3]*n)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3.\tСоздайте массив первых 10 нечетных целых чисел."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19])"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.arange(1, 20, 2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4.  Создайте массив нулей размера 10 x 10, а затем создайте в нём \"рамку\" из единиц по краям."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 1., 1., 1., 1., 1., 1., 1., 1., 1.],\n",
       "       [1., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n",
       "       [1., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n",
       "       [1., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n",
       "       [1., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n",
       "       [1., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n",
       "       [1., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n",
       "       [1., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n",
       "       [1., 0., 0., 0., 0., 0., 0., 0., 0., 1.],\n",
       "       [1., 1., 1., 1., 1., 1., 1., 1., 1., 1.]])"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr = np.zeros((10, 10))\n",
    "\n",
    "arr[0, :], arr[:, 0], arr[:, 9], arr[9, :] = [1, 1, 1, 1]\n",
    "arr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5.  Создайте массив 8 x 8 с шахматной доской из нулей и единиц."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 1., 0., 1., 0., 1., 0., 1.],\n",
       "       [1., 0., 1., 0., 1., 0., 1., 0.],\n",
       "       [0., 1., 0., 1., 0., 1., 0., 1.],\n",
       "       [1., 0., 1., 0., 1., 0., 1., 0.],\n",
       "       [0., 1., 0., 1., 0., 1., 0., 1.],\n",
       "       [1., 0., 1., 0., 1., 0., 1., 0.],\n",
       "       [0., 1., 0., 1., 0., 1., 0., 1.],\n",
       "       [1., 0., 1., 0., 1., 0., 1., 0.]])"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "arr = np.zeros((8, 8))\n",
    "\n",
    "arr[0::2, 1::2], arr[1::2, 0::2] = [1, 1]\n",
    "arr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6.  Создайте функцию, которая создает $n×n$ матрицу с $(i,j)$-элементом, равным $i+j$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9],\n",
       "       [ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10],\n",
       "       [ 2,  3,  4,  5,  6,  7,  8,  9, 10, 11],\n",
       "       [ 3,  4,  5,  6,  7,  8,  9, 10, 11, 12],\n",
       "       [ 4,  5,  6,  7,  8,  9, 10, 11, 12, 13],\n",
       "       [ 5,  6,  7,  8,  9, 10, 11, 12, 13, 14],\n",
       "       [ 6,  7,  8,  9, 10, 11, 12, 13, 14, 15],\n",
       "       [ 7,  8,  9, 10, 11, 12, 13, 14, 15, 16],\n",
       "       [ 8,  9, 10, 11, 12, 13, 14, 15, 16, 17],\n",
       "       [ 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def ij_sum_matrix(n):\n",
    "    i, j = np.ogrid[:n, :n]\n",
    "    return i+j\n",
    "ij_sum_matrix(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "7. Примените функцию dot для перемножения вектор на вектор, матрицу на вектор и матрицу на матрицу."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[30] is the product of two vectors\n",
      "\n",
      "[[30]\n",
      " [70]] is the product of a matrix and a vector\n",
      "\n",
      "[[ 50  60]\n",
      " [114 140]] is the product of two matrices\n"
     ]
    }
   ],
   "source": [
    "vec1 = np.array([1, 2, 3, 4])\n",
    "vec2 = np.array([[1], [2], [3], [4]])\n",
    "matrix1 = np.array([[1, 2, 3, 4], [5, 6, 7, 8]])\n",
    "matrix2 = np.array([[1, 2], [3, 4], [5, 6], [7, 8]])\n",
    "\n",
    "print(np.dot(vec1, vec2), 'is the product of two vectors\\n')\n",
    "print(np.dot(matrix1, vec2), 'is the product of a matrix and a vector\\n')\n",
    "print(np.dot(matrix1, matrix2), 'is the product of two matrices')\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "8. Вычислите cos(x) и sin(x) на интервале [0,1] с шагом $0.05$, а затем объедините оба массива чисел как строки в один массив."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.0, 0.05260728333807213, 0.10506887376594912, 0.15723948186175024, 0.20897462406278547, 0.2601310228046501, 0.3105670033203749, 0.3601428860007191, 0.40872137322898616, 0.4561679296190457, 0.5023511546035125, 0.5403023058681397, 0.547143146340223, 0.5838216399741468, 0.5904198559291864, 0.625724112908743, 0.6320614309590333, 0.6658936781316236, 0.6719525474315213, 0.7042190882928544, 0.709982729144858, 0.7405942033261461, 0.7460466536513234, 0.7749182843977933, 0.7800444439418607, 0.8070962728972044, 0.8118819450498316, 0.8370390536963741, 0.8414709848078965, 0.8646637019492132, 0.8898937127472434, 0.912659212995635, 0.9328971549228098, 0.9505514906876966, 0.9655733276010717, 0.9779210635311101, 0.9875605021181478, 0.9944649474795756, 0.9986152781425827, 1.0]\n"
     ]
    }
   ],
   "source": [
    "num_of_steps = 1/0.05\n",
    "\n",
    "cosines = np.cos(np.linspace(0, 1, int(num_of_steps)))\n",
    "sines = np.sin(np.linspace(0, 1, int(num_of_steps)))\n",
    "result = list(cosines) + list(sines)\n",
    "result.sort()\n",
    "print(result)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "9. Создайте матрицу $A$ размера $3×5$ из случайных чисел с равномерным распределением на отрезке $[-1,3]$ (используйте np.random.rand)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.09761635,  1.17013281,  1.2933726 ,  0.444233  ,  0.70348229],\n",
       "       [-0.39139863,  0.31097465,  0.95319491,  0.26580874, -0.77702792],\n",
       "       [-0.6787108 ,  1.14235316,  2.4835657 ,  0.38983212,  0.0171032 ]])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "a = 4*np.random.rand(3,5)-1\n",
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "10. Найдите сумму всех элементов, сумму внутри строк, сумму внутри столбцов, а также среднее значение, дисперсию и стандартное отклонение чисел для каждой строки матрицы $A$. (Подобно тому, как sorted имеет необязательный аргумент key=, многие функции Numpy имеют необязательный аргумент axis=)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Сумма всех элементов: 7.229299468376018\n",
      "Cумма внутри строк: [3.51360435 0.36155175 3.35414337]\n",
      "Сумма внутри столбцов: [-1.16772578  2.62346061  4.7301332   1.09987386 -0.05644243]\n",
      "Средние значения: [0.70272087 0.07231035 0.67082867]\n",
      "Дисперсии: [0.25493992 0.36135228 1.16718474]\n",
      "Стандартные отклонения: [0.50491575 0.60112584 1.08036325]\n"
     ]
    }
   ],
   "source": [
    "sum = np.sum(a)\n",
    "sum_col = np.sum(a, axis = 0)\n",
    "sum_row = np.sum(a, axis = 1)\n",
    "mean = np.mean(a, axis = 1)\n",
    "variance = np.var(a, axis = 1)\n",
    "std_deviation = np.std(a, axis = 1)\n",
    "print(f'Сумма всех элементов: {sum}\\nCумма внутри строк: {sum_row}\\nСумма внутри столбцов: {sum_col}\\n' \\\n",
    "      f'Средние значения: {mean}\\nДисперсии: {variance}\\nСтандартные отклонения: {std_deviation}')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "11.  Отнимите от каждого элемента матрицы $A$ среднее по строке и поделите на стандартное отклонение строки."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.58509060e+00,  9.25722623e-01,  1.16980253e+00,\n",
       "        -5.11942567e-01,  1.50800948e-03],\n",
       "       [-7.71400844e-01,  3.97028841e-01,  1.46539127e+00,\n",
       "         3.21893318e-01, -1.41291258e+00],\n",
       "       [-1.24915345e+00,  4.36449950e-01,  1.67789587e+00,\n",
       "        -2.60094516e-01, -6.05097848e-01]])"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in range(len(a)):\n",
    "    a[i, :] = (a[i, :] - np.mean(a[i])) / np.std(a[i])\n",
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "12. Отсортируйте матрицу $A$ по 3-ому столбцу, т.е. поменяйте местами строки матрицы так, чтобы 3-й столбец оказался отсортированным. Используйте для этого slicing + argsort + indexing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-1.58509060e+00,  9.25722623e-01,  1.16980253e+00,\n",
       "        -5.11942567e-01,  1.50800948e-03],\n",
       "       [-7.71400844e-01,  3.97028841e-01,  1.46539127e+00,\n",
       "        -2.60094516e-01, -1.41291258e+00],\n",
       "       [-1.24915345e+00,  4.36449950e-01,  1.67789587e+00,\n",
       "         3.21893318e-01, -6.05097848e-01]])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "col = a[:, 3]\n",
    "sorted = np.argsort(a[:, 3])\n",
    "temp = np.zeros((3,))\n",
    "for i in range(3):\n",
    "    temp[i] = col[sorted[i]]\n",
    "a[:, 3] = temp\n",
    "a"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "13. Посчитайте две матрицы: $B = A^TA$ и $C = AA^T$. Что вы можете о них сказать? Какого они размера? В чём их сходство и отличие?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Матрица B: [[ 4.6679558  -2.31881557 -5.08059646  0.61001833  1.84339169]\n",
      " [-2.31881557  1.20508283  2.39703283 -0.43669152 -0.82366597]\n",
      " [-5.08059646  2.39703283  6.33114406 -0.43990848 -3.08399686]\n",
      " [ 0.61001833 -0.43669152 -0.43990848  0.43334966  0.17194185]\n",
      " [ 1.84339169 -0.82366597 -3.08399686  0.17194185  2.36246764]]\n",
      "\n",
      "Матрица C: [[5.         3.43551998 4.18115643]\n",
      " [3.43551998 4.96403385 4.36688287]\n",
      " [4.18115643 4.36688287 5.03596615]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'\\nМатрицы B и C схожи числом измерений 2 и типом данных значений - float64.\\nОтличаются они хранящимися в них значениями, размерами (у B размер - (5,5), у C - (3,3)) \\nи количествами элементов (25 и 9 соответсвенно).\\n'"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "b = np.dot(np.transpose(a), a)\n",
    "c = np.dot(a, np.transpose(a))\n",
    "\n",
    "print(f'Матрица B: {b}\\n\\nМатрица C: {c}')\n",
    "\n",
    "\"\"\"\n",
    "Матрицы B и C схожи числом измерений 2 и типом данных значений - float64.\n",
    "Отличаются они хранящимися в них значениями, размерами (у А размер - (5,5), у B - (3,3)) \n",
    "и количествами элементов (25 и 9 соответсвенно).\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "14. Найдите сумму диагональных элементов матриц $B$ и $C$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "30.0"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sum(np.diagonal(b)) + np.sum(np.diagonal(c))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "15.\tПосчитайте детерминант и ранг матриц $A$, $B$ и $C$, посмотрите на спектр (набор собственных значений) матриц $B$ и $C$, какие выводы вы можете сделать?  \n",
    "(подсказка: используйте готовые функции из библиотеки np.linalg). \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Ранг матрицы А: 3\n",
      "Детерминант матрицы B: 7.34277013788876e-31\n",
      "Ранг матрицы B: 3\n",
      "Спектр матрицы B: [ 1.30035246e+01  1.55816815e+00  4.38307285e-01 -1.10450659e-15\n",
      "  4.36801743e-16]\n",
      "Детерминант матрицы C: 8.88084100197825\n",
      "Ранг матрицы C: 3\n",
      "Спектр матрицы C: [13.00352456  1.55816815  0.43830729]\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'\\nУ матриц A, B, C ранг одинковый. Из этого можно сделать вывод, что при умножении матрицы в любом порядке \\nна себя транспонированную ранг не меняется. Но меняется детерминант и собственные значения.\\n'"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#det_a = np.linalg.det(a) - найти нельзя, потому что матрица A - не квадратная.\n",
    "det_b = np.linalg.det(b)\n",
    "det_c = np.linalg.det(c)\n",
    "rank_a = np.linalg.matrix_rank(a)\n",
    "rank_b = np.linalg.matrix_rank(b)\n",
    "rank_c = np.linalg.matrix_rank(c)\n",
    "w_b, v_b = np.linalg.eig(b)\n",
    "w_c, v_b = np.linalg.eig(c)\n",
    "\n",
    "print(f'Ранг матрицы А: {rank_a}\\nДетерминант матрицы B: {det_b}\\nРанг матрицы B: {rank_b}\\n' \\\n",
    "      f'Спектр матрицы B: {w_b}\\nДетерминант матрицы C: {det_c}\\nРанг матрицы C: {rank_c}\\n' \\\n",
    "      f'Спектр матрицы C: {w_c}\\n')\n",
    "\n",
    "\"\"\"\n",
    "У матриц A, B, C ранг одинковый. Из этого можно сделать вывод, что при умножении матрицы в любом порядке \n",
    "на себя транспонированную ранг не меняется. Но меняется детерминант и собственные значения.\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "16. Численно посчитать определённый интеграл  3-мя методами:  \n",
    "a)\tПрямоугольников $\\int\\limits_a^b {f(x)dx \\approx \\Delta x\\sum\\limits_{k = 0}^N {f({x_k})} }$  \n",
    "b)\tТрапеций $\\int\\limits_a^b {f(x)dx \\approx \\frac{{\\Delta x}}{2}\\left( {f({x_0}) + 2\\sum\\limits_{k = 1}^{N - 1} {f({x_k})}  + f({x_N})} \\right)}$  \n",
    "c)\tПо правилу Симпсона  $\\int\\limits_a^b {f(x)dx \\approx \\frac{{\\Delta x}}{3}\\left( {f({x_0}) + 2\\sum\\limits_{k = 1}^{N/2 - 1} {f({x_{2k}})}  + 4\\sum\\limits_{k = 1}^{N/2} {f({x_{2k - 1}})}  + f({x_N})} \\right)}$  \n",
    "\n",
    "\n",
    "В реализации этих методов цикл for для суммирования использовать нельзя.  \n",
    "Нужно посчитать значение интеграла с некоторым шагом интегрирования (например начать с 0.1), потом уменьшить его в десять раз и ещё раз посчитать и так до тех пор пока отличие в ответах будет в 5-м знаке после запятой, т.е. чтобы ошибка была меньше 1e-5. Получить ответы для 3-х разных методов и сделать соответствующие выводы.  \n",
    "\n",
    "Далее необходимо сравнить полученные оценки с аналитическим решением (т.е. формульным, которое вы должны сами посчитать на листочке и вбить формулу-ответ).   \n",
    "\n",
    "В качестве интеграла взять два из следующих примеров:  \n",
    "- один с номером, сгенерированным случайным образом с помощью функции np.random.randint(9), в качестве seed для генератора случайных чисел взять номер своего студенческого билета. \n",
    "- второй номер - под номером 9, несобственный интерграл. Подумайте, как сделать подбор шага интегрирования адаптивным.\n",
    "\n",
    "<table width=\"80%\"\n",
    "       align=\"center\">\n",
    "    <tr>\n",
    "        <td> 0) $\\int\\limits_3^4 {\\frac{{{x^2} + 3}}{{x - 2}}dx}$ </td>\n",
    "        <td> 1) $\\int\\limits_{ - 2}^{ - 1} {\\frac{{x + 1}}{{{x^3} - {x^2}}}dx}$ </td>\n",
    "        <td> 2) $\\int\\limits_1^2 {\\frac{{{e^{1/{x^2}}}}}{{{x^3}}}dx}$ </td>\n",
    "        <td> 3) $\\int\\limits_1^e {\\frac{{\\cos (\\ln x)}}{x}dx}$ </td>\n",
    "        <td> 4) $\\int\\limits_1^e {\\frac{{dx}}{{x(1 + {{\\ln }^2}x)}}}$ </td>\n",
    "    </tr>                \n",
    "    <tr>\n",
    "        <td> 5) $\\int\\limits_0^{\\pi /2} {{{\\cos }^3}\\alpha \\;d\\alpha }$ </td>\n",
    "        <td> 6) $\\int\\limits_0^{1/3} {c{h^2}3x\\;dx}$ </td>\n",
    "        <td> 7) $\\int\\limits_2^3 {\\frac{{dy}}{{{y^2} - 2y - 8}}dy}$ </td>\n",
    "        <td> 8) $\\int\\limits_0^2 {\\frac{{2x - 1}}{{2x + 1}}dx}$ </td>\n",
    "        <td> 9) $\\int\\limits_{3/4}^2 {\\frac{{dx}}{{\\sqrt {2 + 3x - 2{x^2}} }}}$ </td>\n",
    "        </tr>\n",
    "</table>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "8\n",
      "10.352030263919618 - аналитическое решение функции f(x) на отрезке [0;2]\n",
      "0.347680774573932, 0.38434744124059855, 0.36236901373201197 при шаге интегрирования 0.1\n",
      "0.384624144829599, 0.3868202232609715, 0.37880881640273056 при шаге интегрирования 0.010000000000000002\n",
      "0.389971205158147, 0.39017320116613097, 0.38937306978220776 при шаге интегрирования 0.0010000000000000002\n",
      "0.3905030281568232, 0.39052304815282396, 0.3904430468214424 при шаге интегрирования 0.00010000000000000003\n",
      "0.3905561819130237, 0.39055818211301974, 0.3905501820996884 при шаге интегрирования 1.0000000000000003e-05\n",
      "0.3905614970034922, 0.3905616970054921, 0.3905608970053588 при шаге интегрирования 1.0000000000000004e-06\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'\\nМы видим, что при уменьшении dx уменьшается разница между аналитическим решением и тремя численными выше. Происходит это\\nза счёт увеличения числа шагов N и числа точек xk. \\n'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "np.random.seed(1032201718)\n",
    "print(np.random.randint(9))\n",
    "def f(x):\n",
    "    return (2*x-1)/(2*x+1)\n",
    "\n",
    "def integral(f, a, b, dx):\n",
    "    \"\"\"\n",
    "    Ввод: функция f(x), начало и конец отрезка [a;b], шаг интегрирования\n",
    "    \n",
    "    Вывод: значение интеграла функции f(x) на отрезке [a;b]\n",
    "    \"\"\"\n",
    "    N = int((b-a) / dx)  # количество шагов\n",
    "    xk = np.linspace(a, b, N)  # точки\n",
    "    rectan = dx*np.sum(f(xk))  # решение методом прямоугольников\n",
    "    trapezoid = dx/2*(f(dx) + 2*np.sum(f(xk[1:-1])) + f(xk[-1]))  # решение методом трапеций\n",
    "    simp = dx/3*(f(dx) + 2*np.sum(f(xk[2:-1:2])) + 4*np.sum(f(xk[1:-2:2])) + f(xk[-1]))  # решение методом Симпсона\n",
    "    return f\"{rectan}, {trapezoid}, {simp} при шаге интегрирования {dx}\"\n",
    "\n",
    "anal_solution = np.float64(10.35203026391961716592062485020723)  # аналитическое решение\n",
    "print(f\"{anal_solution} - аналитическое решение функции f(x) на отрезке [0;2]\")\n",
    "\n",
    "for i in range(6):\n",
    "    print(integral(f, 0, 2, 0.1 * 0.1**i))\n",
    "\n",
    "\"\"\"\n",
    "Мы видим, что при уменьшении dx уменьшается разница между аналитическим решением и тремя численными выше. Происходит это\n",
    "за счёт увеличения числа шагов N и числа точек xk. \n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.1107207345395915 - аналитическое решение функции f(x) на отрезке [3/4;2]\n",
      "0.8238512126812755, inf, inf при шаге интегрирования 0.1\n",
      "1.0322244184751246, inf, inf при шаге интегрирования 0.010000000000000002\n",
      "1.0887148327101404, inf, inf при шаге интегрирования 0.0010000000000000002\n",
      "1.1040534034851663, inf, inf при шаге интегрирования 0.00010000000000000003\n",
      "1.1086418042167991, inf, inf при шаге интегрирования 1.0000000000000003e-05\n",
      "1.1100662753424373, inf, inf при шаге интегрирования 1.0000000000000004e-06\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/m8/dbtr02w90wnd3j3lql_8lw100000gp/T/ipykernel_5897/1132446626.py:3: RuntimeWarning: overflow encountered in double_scalars\n",
      "  return 1/np.sqrt(2+3*x-2*x**2, where = x!=2)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "'\\nМы видим, что при уменьшении dx уменьшается разница между аналитическим решением и тремя численными выше. Происходит это\\nза счёт увеличения числа шагов N и числа точек xk. \\n'"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "def f(x):\n",
    "    return 1/np.sqrt(2+3*x-2*x**2, where = x!=2)\n",
    "\n",
    "def integral(f, a, b, dx):\n",
    "    \"\"\"\n",
    "    Ввод: функция f(x), начало и конец отрезка [a;b], шаг интегрирования\n",
    "    \n",
    "    Вывод: значение интеграла функции f(x) на отрезке [a;b]\n",
    "    \"\"\"\n",
    "    N = int((b-a) / dx)  # количество шагов\n",
    "    xk = np.linspace(a, b, N)  # точки\n",
    "    rectan = dx*np.sum(f(xk))  # решение методом прямоугольников\n",
    "    trapezoid = dx/2*(f(dx) + 2*np.sum(f(xk[1:-1])) + f(xk[-1]))  # решение методом трапеций\n",
    "    simp = dx/3*(f(dx) + 2*np.sum(f(xk[2:-1:2])) + 4*np.sum(f(xk[1:-2:2])) + f(xk[-1]))  # решение методом Симпсона\n",
    "    return f\"{rectan}, {trapezoid}, {simp} при шаге интегрирования {dx}\"\n",
    "\n",
    "anal_solution = np.float64(1.110720734539591561753970247515173)  # аналитическое решение\n",
    "print(f\"{anal_solution} - аналитическое решение функции f(x) на отрезке [3/4;2]\")\n",
    "\n",
    "for i in range(6):\n",
    "    print(integral(f, np.float64(3/4), 2, 0.1 * 0.1**i))\n",
    "    \n",
    "\"\"\"\n",
    "Мы видим, что при уменьшении dx уменьшается разница между аналитическим решением и тремя численными выше. Происходит это\n",
    "за счёт увеличения числа шагов N и числа точек xk. \n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
